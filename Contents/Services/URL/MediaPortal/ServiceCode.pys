from urllib import urlencode

BASE = "http://%s:4322/MPExtended" % (Network.Address)
DETAIL = BASE + "/TVAccessService/json/GetChannelBasicById"
INIT = BASE + "/StreamingService/json/InitStream"
START = BASE + "/StreamingService/json/StartStream"
TRANSCODE = BASE + "/StreamingService/stream/CustomTranscoderData?identifier=%s&action=playlist&parameters=index.m3u8"
ACTIVE = BASE + "/StreamingService/json/GetStreamingSessions"

##############################################################################################################################
def MetadataObjectForURL(url):

	querystring = ParseURL(url)
	id = querystring["id"]
	token = querystring["token"]
	detail = RunRequest(DETAIL, token = token, values = {"channelId": id})

	return VideoClipObject(
		title = detail["Title"]
	)

##############################################################################################################################
def MediaObjectsForURL(url):

	if Client.Platform in [ClientPlatform.Windows, ClientPlatform.MacOSX, ClientPlatform.Linux]:
		return [
			MediaObject(
				parts = [PartObject(key=Callback(PlayStream, url=url, platform=Client.Platform))],
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC
			)
		]
	else:
		return [
			MediaObject(
				parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayStream, url=url, platform=Client.Platform)))],
				protocols = ['hls', 'http-live-streaming', 'http-mp4-streaming'],
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC
			)
		]


##############################################################################################################################
def PlayStream(url, platform):

	if url == None or platform == None:
		return

	querystring = ParseURL(url)
	id = querystring["id"]
	token = querystring["token"]
	playlist_url = None
	active = False

	if platform in [ClientPlatform.Windows, ClientPlatform.MacOSX, ClientPlatform.Linux]:
		profile = "Direct"
	else:
		profile = "HTTP Live Streaming HQ"

	try:
		sessions = RunRequest(ACTIVE, token = token)
		for s in sessions:
			if id == str(s["Identifier"]) and profile == s["Profile"]:
				active = True
				break

		if active == True:
			playlist_url = TRANSCODE % (id)

		else:
			init = RunRequest(INIT, token = token, values = {"identifier": id, "itemId": id, "type": "12"})
			start = RunRequest(START, token = token, values = {"identifier": id, "profileName": profile})
			playlist_url = start["Result"]

		return Redirect(playlist_url)

	except:
		raise Ex.LiveMediaNotStarted

##############################################################################################################################
def RunRequest(url, token, values = {}):

	headers = {"Authorization": "Basic %s" % (token)}
	qs = urlencode(values)

	return JSON.ObjectFromURL(url + "?" + qs, headers = headers, cacheTime = 0, timeout=60)

##############################################################################################################################
def ParseURL(url):

	data = {}
	querystring = url.split("?")[1].split("&")
	for s in querystring:
		values = s.split("=")
		data[values[0]] = values[1]

	return data

##############################################################################################################################